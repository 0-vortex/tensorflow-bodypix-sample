/* eslint-disable @next/next/no-img-element */
import { useRef, useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Image from "next/image";
import "@tensorflow/tfjs-core";
import "@tensorflow/tfjs-converter";
import "@tensorflow/tfjs-backend-webgl";
import styles from "../styles/Home.module.css";
import sample from "../assets/sample.png";

import * as bodyPix from "@tensorflow-models/body-pix";
import Webcam from "react-webcam";
// import * as faceLandmarksDetection from "@tensorflow-models/face-landmarks-detection";
// import { MediaPipeFaceMesh } from "@tensorflow-models/face-landmarks-detection/dist/types";
// import { draw } from "../libs/mask";

function Home() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const webcamRef = useRef<Webcam>(null);
  const [mask, setMask] = useState<any>();
  const [bodypixnet, setBodypixnet] = useState<bodyPix.BodyPix>();

  useEffect(() => {
    bodyPix.load().then((net: bodyPix.BodyPix) => {
      setBodypixnet(net);
    });
  }, []);

  useEffect(() => {
    const webcam = webcamRef.current.video as HTMLVideoElement;
    const canvas = canvasRef.current;
    const opacity = 1;

    if (mask) {
      bodyPix.drawPixelatedMask(canvas, webcam, mask, opacity, 0, false, 15);
    }
  }, [mask, webcamRef, canvasRef, bodypixnet]);

  const showResult = useCallback((seg) => {
    const foregroundColor = { r: 255, g: 255, b: 255, a: 1 };
    const backgroundColor = { r: 255, g: 255, b: 255, a: 255 };
    setMask(bodyPix.toMask(seg, foregroundColor, backgroundColor, false));
  }, []);

  const start = useCallback(() => {
    setInterval(() => {
      const webcam = webcamRef.current.video as HTMLVideoElement;
      if (bodypixnet) {
        bodypixnet.segmentPerson(webcam).then((seg) => {
          showResult(seg);
          renderSegmentation(seg);
        });
      }
    }, 100);
  }, [bodypixnet, showResult]);

  function draw(text) {
    const canvas = canvasRef.current;
    var ctx = canvas.getContext("2d");
    ctx.font = "48px serif";
    ctx.fillText(text, 10, 50);
  }

  function renderSegmentation(segmentation) {
    let s = "";
    const xStride = Math.max(1, Math.floor(segmentation.width / 30)); // ~30 wide
    const yStride = xStride * 2; // chars are ~twice as tall as they are wide
    for (let y = 0; y < segmentation.height; y += yStride) {
      for (let x = 0; x < segmentation.width; x += xStride) {
        s += segmentation.data[segmentation.width * y + x] == 1 ? "1" : "0";
      }
      s += "\n";
    }
    console.log(s);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Webcam
          audio={false}
          ref={webcamRef}
          style={{
            position: "absolute",
            margin: "auto",
            textAlign: "center",
            top: 100,
            left: 0,
            right: 0,
            zIndex: 9,
          }}
        />
        <canvas
          ref={canvasRef}
          style={{
            position: "absolute",
            margin: "auto",
            textAlign: "center",
            top: 100,
            left: 0,
            right: 0,
            zIndex: 9,
          }}
        />
      </main>
      <button onClick={start}>start</button>
    </div>
  );
}

export default Home;
