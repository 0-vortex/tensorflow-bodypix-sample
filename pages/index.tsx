import { useRef, useState, useEffect } from "react";
import Head from "next/head";
import "@tensorflow/tfjs-core";
import "@tensorflow/tfjs-converter";
import "@tensorflow/tfjs-backend-webgl";
import styles from "../styles/Home.module.scss";
import * as bodyPix from "@tensorflow-models/body-pix";
import Webcam from "react-webcam";
import { useRouter } from "next/dist/client/router";
import en from "../locales/en";
import ja from "../locales/ja";
import test from "../assets/1.png";

function Home() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const webcamRef = useRef<Webcam>(null);
  const [bodypixnet, setBodypixnet] = useState<bodyPix.BodyPix>();
  const [prevClassName, setPrevClassName] = useState<string>();
  const { locale } = useRouter();
  const t = locale === "en" ? en : ja;

  useEffect(() => {
    bodyPix.load().then((net: bodyPix.BodyPix) => {
      setBodypixnet(net);
    });
  }, []);

  const drawimage = async (
    webcam: HTMLVideoElement,
    context: CanvasRenderingContext2D,
    canvas: HTMLCanvasElement
  ) => {
    // create tempCanvas
    const tempCanvas = document.createElement("canvas");
    tempCanvas.width = webcam.videoWidth;
    tempCanvas.height = webcam.videoHeight;
    const tempCtx = tempCanvas.getContext("2d");
    (async function drawMask() {
      requestAnimationFrame(drawMask);
      // draw mask on tempCanvas
      const segmentation = await bodypixnet.segmentPerson(webcam);
      const mask = bodyPix.toMask(segmentation);
      tempCtx.putImageData(mask, 0, 0);
      // draw original image
      context.drawImage(webcam, 0, 0, canvas.width, canvas.height);
      // use destination-out, then only masked area will be removed
      context.save();
      context.globalCompositeOperation = "destination-out";
      context.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height);
      context.restore();
    })();
  };

  const clickHandler = async (className: string) => {
    const webcam = webcamRef.current.video as HTMLVideoElement;
    const canvas = canvasRef.current;
    webcam.width = canvas.width = webcam.videoWidth;
    webcam.height = canvas.height = webcam.videoHeight;
    const context = canvas.getContext("2d");
    context.clearRect(0, 0, canvas.width, canvas.height);
    if (prevClassName) {
      canvas.classList.remove(prevClassName);
      setPrevClassName(className);
    } else {
      setPrevClassName(className);
    }
    canvas.classList.add(className);
    if (bodypixnet) {
      drawimage(webcam, context, canvas);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Travel App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/static/logo.jpg" />
      </Head>
      <header className={styles.header}>
        <h1 className={styles.title}>{t.title}</h1>
      </header>
      <main className={styles.main}>
        <div className={styles.videoContainer}>
          <Webcam audio={false} ref={webcamRef} className={styles.video} />
          <canvas ref={canvasRef} className={styles.canvas} />
        </div>
        <div className={styles.right}>
          <h4 className={styles.title}>{t.select}</h4>
          <div className={styles.buttons}>
            <button onClick={() => clickHandler(styles.argentina)}>
              {t.argentina}
            </button>
            <button onClick={() => clickHandler(styles.austria)}>
              {t.austria}
            </button>
            <button onClick={() => clickHandler(styles.brazil)}>
              {t.brazil}
            </button>
            <button onClick={() => clickHandler(styles.bulgaria)}>
              {t.bulgaria}
            </button>
            <button onClick={() => clickHandler(styles.cambodia)}>
              {t.cambodia}
            </button>
            <button onClick={() => clickHandler(styles.dubai)}>
              {t.dubai}
            </button>
            <button onClick={() => clickHandler(styles.egypt)}>
              {t.egypt}
            </button>
            <button onClick={() => clickHandler(styles.germany)}>
              {t.germany}
            </button>
            <button onClick={() => clickHandler(styles.india)}>
              {t.india}
            </button>
            <button onClick={() => clickHandler(styles.korea)}>
              {t.korea}
            </button>
            <button onClick={() => clickHandler(styles.romania)}>
              {t.romania}
            </button>
            <button onClick={() => clickHandler(styles.slovakia)}>
              {t.slovakia}
            </button>
            <button onClick={() => clickHandler(styles.spain)}>
              {t.spain}
            </button>
            <button onClick={() => clickHandler(styles.tailand)}>
              {t.tailand}
            </button>
            <button onClick={() => clickHandler(styles.taiwan)}>
              {t.taiwan}
            </button>
            <button onClick={() => clickHandler(styles.turky)}>
              {t.turky}
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Home;
