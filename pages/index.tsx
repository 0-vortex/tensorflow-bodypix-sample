/* eslint-disable @next/next/no-img-element */
import { useRef, useState, useEffect } from "react";
import Head from "next/head";
import "@tensorflow/tfjs-core";
import "@tensorflow/tfjs-converter";
import "@tensorflow/tfjs-backend-webgl";
import styles from "../styles/Home.module.scss";
import * as bodyPix from "@tensorflow-models/body-pix";
import Webcam from "react-webcam";

function Home() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const webcamRef = useRef<Webcam>(null);
  const [bodypixnet, setBodypixnet] = useState<bodyPix.BodyPix>();

  useEffect(() => {
    bodyPix.load().then((net: bodyPix.BodyPix) => {
      setBodypixnet(net);
    });
  }, []);

  const drawimage = async (
    webcam: HTMLVideoElement,
    context: CanvasRenderingContext2D,
    canvas: HTMLCanvasElement
  ) => {
    webcam.width = canvas.width = webcam.videoWidth;
    webcam.height = canvas.height = webcam.videoHeight;
    // to remove background, need another canvas
    const tempCanvas = document.createElement("canvas");
    tempCanvas.width = webcam.videoWidth;
    tempCanvas.height = webcam.videoHeight;
    const tempCtx = tempCanvas.getContext("2d");
    (async function loop() {
      requestAnimationFrame(loop);

      // create mask on temp canvas
      const segmentation = await bodypixnet.segmentPerson(webcam);
      const mask = bodyPix.toMask(segmentation);
      tempCtx.putImageData(mask, 0, 0);
      // draw original
      context.drawImage(webcam, 0, 0, canvas.width, canvas.height);
      // then overwrap, masked area will be removed
      context.save();
      context.globalCompositeOperation = "destination-out";
      context.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height);

      context.restore();
    })();
  };

  const onClick = async (style: string) => {
    const webcam = webcamRef.current.video as HTMLVideoElement;
    const canvas = canvasRef.current;
    webcam.width = canvas.width = webcam.videoWidth;
    webcam.height = canvas.height = webcam.videoHeight;

    const context = canvas.getContext("2d");
    canvas.classList.add(style);

    // to remove background, need another canvas
    const tempCanvas = document.createElement("canvas");
    tempCanvas.width = webcam.videoWidth;
    tempCanvas.height = webcam.videoHeight;

    if (bodypixnet) {
      drawimage(webcam, context, canvas);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Travel App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1 className={styles.title}>オンライン旅行</h1>
      </header>
      <main className={styles.main}>
        <Webcam audio={false} ref={webcamRef} className={styles.default} />
        <canvas ref={canvasRef} className={styles.default} />
      </main>
      <div className={styles.buttons}>
        <button onClick={() => onClick(styles.canvas)}>start</button>
      </div>
    </div>
  );
}

export default Home;
